// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   string  `json:"error"`
	Message *string `json:"message,omitempty"`
}

// GameListResponse defines model for GameListResponse.
type GameListResponse struct {
	Games      []GameResponse     `json:"games"`
	Pagination PaginationResponse `json:"pagination"`
}

// GameRequest defines model for GameRequest.
type GameRequest struct {
	FavoriteTeam string  `json:"favorite_team"`
	Season       int     `json:"season"`
	Spread       float32 `json:"spread"`
	UnderdogTeam string  `json:"underdog_team"`
	Week         int     `json:"week"`
}

// GameResponse defines model for GameResponse.
type GameResponse struct {
	CreatedAt    time.Time `json:"created_at"`
	FavoriteTeam string    `json:"favorite_team"`
	Id           uint      `json:"id"`
	Season       int       `json:"season"`
	Spread       float32   `json:"spread"`
	UnderdogTeam string    `json:"underdog_team"`
	UpdatedAt    time.Time `json:"updated_at"`
	Week         int       `json:"week"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PaginationResponse defines model for PaginationResponse.
type PaginationResponse struct {
	Limit int   `json:"limit"`
	Page  int   `json:"page"`
	Pages int64 `json:"pages"`
	Total int64 `json:"total"`
}

// PickListResponse defines model for PickListResponse.
type PickListResponse struct {
	Pagination PaginationResponse `json:"pagination"`
	Picks      []PickResponse     `json:"picks"`
}

// PickRequest defines model for PickRequest.
type PickRequest struct {
	GameId    uint   `json:"game_id"`
	Picked    string `json:"picked"`
	QuickPick bool   `json:"quick_pick"`
	Rank      int    `json:"rank"`
	UserId    *uint  `json:"user_id,omitempty"`
}

// PickResponse defines model for PickResponse.
type PickResponse struct {
	CreatedAt time.Time     `json:"created_at"`
	Game      *GameResponse `json:"game,omitempty"`
	GameId    uint          `json:"game_id"`
	Id        uint          `json:"id"`
	Picked    string        `json:"picked"`
	QuickPick bool          `json:"quick_pick"`
	Rank      int           `json:"rank"`
	UpdatedAt time.Time     `json:"updated_at"`
	User      *UserResponse `json:"user,omitempty"`
	UserId    uint          `json:"user_id"`
}

// PlayerRequest defines model for PlayerRequest.
type PlayerRequest struct {
	Address string `json:"address"`
	Name    string `json:"name"`
}

// PlayerResponse defines model for PlayerResponse.
type PlayerResponse struct {
	Address string `json:"address"`
	Id      uint   `json:"id"`
	Name    string `json:"name"`
	UserId  uint   `json:"user_id"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    string  `json:"email"`
	Name     string  `json:"name"`
	Password string  `json:"password"`
	Role     *string `json:"role,omitempty"`
}

// ResultRequest defines model for ResultRequest.
type ResultRequest struct {
	FavoriteScore int    `json:"favorite_score"`
	GameId        uint   `json:"game_id"`
	Outcome       string `json:"outcome"`
	UnderdogScore int    `json:"underdog_score"`
}

// ResultResponse defines model for ResultResponse.
type ResultResponse struct {
	CreatedAt     time.Time     `json:"created_at"`
	FavoriteScore int           `json:"favorite_score"`
	Game          *GameResponse `json:"game,omitempty"`
	GameId        uint          `json:"game_id"`
	Id            uint          `json:"id"`
	Outcome       string        `json:"outcome"`
	UnderdogScore int           `json:"underdog_score"`
	UpdatedAt     time.Time     `json:"updated_at"`
}

// SurvivorPickRequest defines model for SurvivorPickRequest.
type SurvivorPickRequest struct {
	Team   string `json:"team"`
	UserId *uint  `json:"user_id,omitempty"`
	Week   int    `json:"week"`
}

// SurvivorPickResponse defines model for SurvivorPickResponse.
type SurvivorPickResponse struct {
	CreatedAt time.Time     `json:"created_at"`
	Id        uint          `json:"id"`
	Team      string        `json:"team"`
	UpdatedAt time.Time     `json:"updated_at"`
	User      *UserResponse `json:"user,omitempty"`
	UserId    uint          `json:"user_id"`
	Week      int           `json:"week"`
}

// UserListResponse defines model for UserListResponse.
type UserListResponse struct {
	Pagination PaginationResponse `json:"pagination"`
	Users      []UserWithStats    `json:"users"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	Email    string  `json:"email"`
	Name     string  `json:"name"`
	Password *string `json:"password,omitempty"`
	Role     string  `json:"role"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	CreatedAt time.Time       `json:"created_at"`
	Email     string          `json:"email"`
	Id        uint            `json:"id"`
	Name      string          `json:"name"`
	Player    *PlayerResponse `json:"player,omitempty"`
	Role      string          `json:"role"`
	UpdatedAt time.Time       `json:"updated_at"`
}

// UserWithStats defines model for UserWithStats.
type UserWithStats struct {
	CreatedAt time.Time       `json:"created_at"`
	Email     string          `json:"email"`
	Id        uint            `json:"id"`
	Name      string          `json:"name"`
	PickCount int             `json:"pick_count"`
	Player    *PlayerResponse `json:"player,omitempty"`
	Role      string          `json:"role"`
	TotalWins int             `json:"total_wins"`
	UpdatedAt time.Time       `json:"updated_at"`
}

// AdminSubmitPicksJSONBody defines parameters for AdminSubmitPicks.
type AdminSubmitPicksJSONBody = []PickRequest

// DeleteUserParams defines parameters for DeleteUser.
type DeleteUserParams struct {
	Email string `form:"email" json:"email"`
}

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	Week   int `form:"week" json:"week"`
	Season int `form:"season" json:"season"`
}

// CreateGameJSONBody defines parameters for CreateGame.
type CreateGameJSONBody = []GameRequest

// SubmitPicksJSONBody defines parameters for SubmitPicks.
type SubmitPicksJSONBody = []PickRequest

// GetSeasonResultsParams defines parameters for GetSeasonResults.
type GetSeasonResultsParams struct {
	Season int `form:"season" json:"season"`
}

// GetWeeklyResultsParams defines parameters for GetWeeklyResults.
type GetWeeklyResultsParams struct {
	Week   int `form:"week" json:"week"`
	Season int `form:"season" json:"season"`
}

// UpdateGameJSONRequestBody defines body for UpdateGame for application/json ContentType.
type UpdateGameJSONRequestBody = GameRequest

// AdminSubmitPicksJSONRequestBody defines body for AdminSubmitPicks for application/json ContentType.
type AdminSubmitPicksJSONRequestBody = AdminSubmitPicksJSONBody

// AdminUpdateUserJSONRequestBody defines body for AdminUpdateUser for application/json ContentType.
type AdminUpdateUserJSONRequestBody = UserRequest

// CreateGameJSONRequestBody defines body for CreateGame for application/json ContentType.
type CreateGameJSONRequestBody = CreateGameJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// SubmitPicksJSONRequestBody defines body for SubmitPicks for application/json ContentType.
type SubmitPicksJSONRequestBody = SubmitPicksJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterRequest

// SubmitResultJSONRequestBody defines body for SubmitResult for application/json ContentType.
type SubmitResultJSONRequestBody = ResultRequest

// SubmitSurvivorPickJSONRequestBody defines body for SubmitSurvivorPick for application/json ContentType.
type SubmitSurvivorPickJSONRequestBody = SurvivorPickRequest

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = PlayerRequest
