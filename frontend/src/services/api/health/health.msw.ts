/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type { ErrorResponse } from "../../model";

export const getHealthCheckResponseMock400 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getHealthCheckMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/health",
    async (info) => {
      await delay(10);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getHealthCheckMockHandler200 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/health",
    async (info) => {
      await delay(10);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getHealthCheckMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/health",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getHealthCheckResponseMock400(),
        ),
        { status: 400, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getHealthMock = () => [getHealthCheckMockHandler()];
