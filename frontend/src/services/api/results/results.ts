/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ErrorResponse,
  GetSeasonResultsParams,
  GetWeeklyResultsParams,
  ResultRequest,
  ResultResponse,
  SeasonResult,
  WeeklyResult,
} from "../../model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get weekly results
 */
export const getWeeklyResults = (
  params: GetWeeklyResultsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WeeklyResult[]>(
    { url: `/api/results/week`, method: "GET", params, signal },
    options,
  );
};

export const getGetWeeklyResultsQueryKey = (
  params?: GetWeeklyResultsParams,
) => {
  return [`/api/results/week`, ...(params ? [params] : [])] as const;
};

export const getGetWeeklyResultsQueryOptions = <
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWeeklyResultsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWeeklyResults>>
  > = ({ signal }) => getWeeklyResults(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWeeklyResults>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWeeklyResultsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWeeklyResults>>
>;
export type GetWeeklyResultsQueryError = ErrorResponse;

export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeeklyResults>>,
          TError,
          Awaited<ReturnType<typeof getWeeklyResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeeklyResults>>,
          TError,
          Awaited<ReturnType<typeof getWeeklyResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get weekly results
 */

export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWeeklyResultsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get season results
 */
export const getSeasonResults = (
  params: GetSeasonResultsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SeasonResult[]>(
    { url: `/api/results/season`, method: "GET", params, signal },
    options,
  );
};

export const getGetSeasonResultsQueryKey = (
  params?: GetSeasonResultsParams,
) => {
  return [`/api/results/season`, ...(params ? [params] : [])] as const;
};

export const getGetSeasonResultsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSeasonResultsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSeasonResults>>
  > = ({ signal }) => getSeasonResults(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSeasonResults>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSeasonResultsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSeasonResults>>
>;
export type GetSeasonResultsQueryError = ErrorResponse;

export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSeasonResults>>,
          TError,
          Awaited<ReturnType<typeof getSeasonResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSeasonResults>>,
          TError,
          Awaited<ReturnType<typeof getSeasonResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get season results
 */

export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSeasonResultsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Submit a result
 */
export const submitResult = (
  resultRequest: ResultRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ResultResponse>(
    {
      url: `/api/results`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: resultRequest,
      signal,
    },
    options,
  );
};

export const getSubmitResultMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitResult>>,
    TError,
    { data: ResultRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitResult>>,
  TError,
  { data: ResultRequest },
  TContext
> => {
  const mutationKey = ["submitResult"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitResult>>,
    { data: ResultRequest }
  > = (props) => {
    const { data } = props ?? {};

    return submitResult(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitResultMutationResult = NonNullable<
  Awaited<ReturnType<typeof submitResult>>
>;
export type SubmitResultMutationBody = ResultRequest;
export type SubmitResultMutationError = ErrorResponse;

/**
 * @summary Submit a result
 */
export const useSubmitResult = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof submitResult>>,
      TError,
      { data: ResultRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof submitResult>>,
  TError,
  { data: ResultRequest },
  TContext
> => {
  const mutationOptions = getSubmitResultMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
