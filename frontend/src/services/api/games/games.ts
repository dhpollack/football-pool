/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ErrorResponse,
  GameListResponse,
  GameRequest,
  GameResponse,
  GetGamesParams,
} from "../../model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get games by week and season
 */
export const getGames = (
  params: GetGamesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameListResponse>(
    { url: `/api/games`, method: "GET", params, signal },
    options,
  );
};

export const getGetGamesQueryKey = (params?: GetGamesParams) => {
  return [`/api/games`, ...(params ? [params] : [])] as const;
};

export const getGetGamesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGamesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGames>>> = ({
    signal,
  }) => getGames(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGames>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGamesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGames>>
>;
export type GetGamesQueryError = ErrorResponse;

export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGames>>,
          TError,
          Awaited<ReturnType<typeof getGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGames>>,
          TError,
          Awaited<ReturnType<typeof getGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get games by week and season
 */

export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGamesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create new games
 */
export const createGame = (
  gameRequest: GameRequest[],
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameResponse[]>(
    {
      url: `/api/admin/games/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: gameRequest,
      signal,
    },
    options,
  );
};

export const getCreateGameMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGame>>,
    TError,
    { data: GameRequest[] },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createGame>>,
  TError,
  { data: GameRequest[] },
  TContext
> => {
  const mutationKey = ["createGame"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createGame>>,
    { data: GameRequest[] }
  > = (props) => {
    const { data } = props ?? {};

    return createGame(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGame>>
>;
export type CreateGameMutationBody = GameRequest[];
export type CreateGameMutationError = ErrorResponse;

/**
 * @summary Create new games
 */
export const useCreateGame = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createGame>>,
      TError,
      { data: GameRequest[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createGame>>,
  TError,
  { data: GameRequest[] },
  TContext
> => {
  const mutationOptions = getCreateGameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Admin list games
 */
export const adminListGames = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameListResponse>(
    { url: `/api/admin/games`, method: "GET", signal },
    options,
  );
};

export const getAdminListGamesQueryKey = () => {
  return [`/api/admin/games`] as const;
};

export const getAdminListGamesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminListGamesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminListGames>>> = ({
    signal,
  }) => adminListGames(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminListGames>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminListGamesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminListGames>>
>;
export type AdminListGamesQueryError = ErrorResponse;

export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListGames>>,
          TError,
          Awaited<ReturnType<typeof adminListGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListGames>>,
          TError,
          Awaited<ReturnType<typeof adminListGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin list games
 */

export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminListGamesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update game
 */
export const updateGame = (
  id: number,
  gameRequest: GameRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GameResponse>(
    {
      url: `/api/admin/games/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: gameRequest,
    },
    options,
  );
};

export const getUpdateGameMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateGame>>,
    TError,
    { id: number; data: GameRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateGame>>,
  TError,
  { id: number; data: GameRequest },
  TContext
> => {
  const mutationKey = ["updateGame"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateGame>>,
    { id: number; data: GameRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateGame(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGame>>
>;
export type UpdateGameMutationBody = GameRequest;
export type UpdateGameMutationError = ErrorResponse;

/**
 * @summary Update game
 */
export const useUpdateGame = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateGame>>,
      TError,
      { id: number; data: GameRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateGame>>,
  TError,
  { id: number; data: GameRequest },
  TContext
> => {
  const mutationOptions = getUpdateGameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete game
 */
export const deleteGame = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/admin/games/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteGameMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGame>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGame>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteGame"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGame>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteGame(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGame>>
>;

export type DeleteGameMutationError = ErrorResponse;

/**
 * @summary Delete game
 */
export const useDeleteGame = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteGame>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteGame>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteGameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
