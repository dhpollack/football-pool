/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ErrorResponse,
  SurvivorPickRequest,
  SurvivorPickResponse,
} from "../../model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get survivor picks
 */
export const getSurvivorPicks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SurvivorPickResponse[]>(
    { url: `/api/survivor/picks`, method: "GET", signal },
    options,
  );
};

export const getGetSurvivorPicksQueryKey = () => {
  return [`/api/survivor/picks`] as const;
};

export const getGetSurvivorPicksQueryOptions = <
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getSurvivorPicks>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSurvivorPicksQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSurvivorPicks>>
  > = ({ signal }) => getSurvivorPicks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSurvivorPicks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSurvivorPicksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSurvivorPicks>>
>;
export type GetSurvivorPicksQueryError = ErrorResponse;

export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSurvivorPicks>>,
          TError,
          Awaited<ReturnType<typeof getSurvivorPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSurvivorPicks>>,
          TError,
          Awaited<ReturnType<typeof getSurvivorPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get survivor picks
 */

export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSurvivorPicksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Submit survivor pick
 */
export const submitSurvivorPick = (
  survivorPickRequest: SurvivorPickRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SurvivorPickResponse>(
    {
      url: `/api/survivor/picks/submit`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: survivorPickRequest,
      signal,
    },
    options,
  );
};

export const getSubmitSurvivorPickMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitSurvivorPick>>,
    TError,
    { data: SurvivorPickRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitSurvivorPick>>,
  TError,
  { data: SurvivorPickRequest },
  TContext
> => {
  const mutationKey = ["submitSurvivorPick"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitSurvivorPick>>,
    { data: SurvivorPickRequest }
  > = (props) => {
    const { data } = props ?? {};

    return submitSurvivorPick(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitSurvivorPickMutationResult = NonNullable<
  Awaited<ReturnType<typeof submitSurvivorPick>>
>;
export type SubmitSurvivorPickMutationBody = SurvivorPickRequest;
export type SubmitSurvivorPickMutationError = ErrorResponse;

/**
 * @summary Submit survivor pick
 */
export const useSubmitSurvivorPick = <
  TError = ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof submitSurvivorPick>>,
      TError,
      { data: SurvivorPickRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof submitSurvivorPick>>,
  TError,
  { data: SurvivorPickRequest },
  TContext
> => {
  const mutationOptions = getSubmitSurvivorPickMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
