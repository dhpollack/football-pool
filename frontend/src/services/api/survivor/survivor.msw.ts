/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { SurvivorPickResponse } from "../../model";

export const getGetSurvivorPicksResponseMock = (): SurvivorPickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    week: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getSubmitSurvivorPickResponseMock = (
  overrideResponse: Partial<SurvivorPickResponse> = {},
): SurvivorPickResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  user_id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  user: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      email: faker.string.alpha({ length: { min: 10, max: 20 } }),
      role: faker.string.alpha({ length: { min: 10, max: 20 } }),
      player: faker.helpers.arrayElement([
        {
          id: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          user_id: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          address: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        undefined,
      ]),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    undefined,
  ]),
  week: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  team: faker.string.alpha({ length: { min: 10, max: 20 } }),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getGetSurvivorPicksMockHandler = (
  overrideResponse?:
    | SurvivorPickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SurvivorPickResponse[]> | SurvivorPickResponse[]),
) => {
  return http.get("*/api/survivor/picks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetSurvivorPicksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSubmitSurvivorPickMockHandler = (
  overrideResponse?:
    | SurvivorPickResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SurvivorPickResponse> | SurvivorPickResponse),
) => {
  return http.post("*/api/survivor/picks/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSubmitSurvivorPickResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getSurvivorMock = () => [
  getGetSurvivorPicksMockHandler(),
  getSubmitSurvivorPickMockHandler(),
];
