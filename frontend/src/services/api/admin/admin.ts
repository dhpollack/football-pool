/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ErrorResponse,
  WeekListResponse,
  WeekRequest,
  WeekResponse,
} from "../../model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary List all weeks
 */
export const listWeeks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WeekListResponse>(
    { url: `/api/admin/weeks`, method: "GET", signal },
    options,
  );
};

export const getListWeeksQueryKey = () => {
  return [`/api/admin/weeks`] as const;
};

export const getListWeeksQueryOptions = <
  TData = Awaited<ReturnType<typeof listWeeks>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listWeeks>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListWeeksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listWeeks>>> = ({
    signal,
  }) => listWeeks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listWeeks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListWeeksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listWeeks>>
>;
export type ListWeeksQueryError = ErrorResponse;

export function useListWeeks<
  TData = Awaited<ReturnType<typeof listWeeks>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWeeks>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listWeeks>>,
          TError,
          Awaited<ReturnType<typeof listWeeks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListWeeks<
  TData = Awaited<ReturnType<typeof listWeeks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWeeks>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listWeeks>>,
          TError,
          Awaited<ReturnType<typeof listWeeks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListWeeks<
  TData = Awaited<ReturnType<typeof listWeeks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWeeks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all weeks
 */

export function useListWeeks<
  TData = Awaited<ReturnType<typeof listWeeks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWeeks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListWeeksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a new week
 */
export const createWeek = (
  weekRequest: WeekRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WeekResponse>(
    {
      url: `/api/admin/weeks`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: weekRequest,
      signal,
    },
    options,
  );
};

export const getCreateWeekMutationOptions = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWeek>>,
    TError,
    { data: WeekRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWeek>>,
  TError,
  { data: WeekRequest },
  TContext
> => {
  const mutationKey = ["createWeek"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWeek>>,
    { data: WeekRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createWeek(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWeekMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWeek>>
>;
export type CreateWeekMutationBody = WeekRequest;
export type CreateWeekMutationError = ErrorResponse | ErrorResponse;

/**
 * @summary Create a new week
 */
export const useCreateWeek = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createWeek>>,
      TError,
      { data: WeekRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createWeek>>,
  TError,
  { data: WeekRequest },
  TContext
> => {
  const mutationOptions = getCreateWeekMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update a week
 */
export const updateWeek = (
  id: number,
  weekRequest: WeekRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<WeekResponse>(
    {
      url: `/api/admin/weeks/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: weekRequest,
    },
    options,
  );
};

export const getUpdateWeekMutationOptions = <
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWeek>>,
    TError,
    { id: number; data: WeekRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateWeek>>,
  TError,
  { id: number; data: WeekRequest },
  TContext
> => {
  const mutationKey = ["updateWeek"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateWeek>>,
    { id: number; data: WeekRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateWeek(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateWeekMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateWeek>>
>;
export type UpdateWeekMutationBody = WeekRequest;
export type UpdateWeekMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Update a week
 */
export const useUpdateWeek = <
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateWeek>>,
      TError,
      { id: number; data: WeekRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateWeek>>,
  TError,
  { id: number; data: WeekRequest },
  TContext
> => {
  const mutationOptions = getUpdateWeekMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a week
 */
export const deleteWeek = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/admin/weeks/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteWeekMutationOptions = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWeek>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWeek>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteWeek"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWeek>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteWeek(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWeekMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWeek>>
>;

export type DeleteWeekMutationError = ErrorResponse | ErrorResponse;

/**
 * @summary Delete a week
 */
export const useDeleteWeek = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteWeek>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteWeek>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteWeekMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Activate a week
 */
export const activateWeek = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WeekResponse>(
    { url: `/api/admin/weeks/${id}/activate`, method: "POST", signal },
    options,
  );
};

export const getActivateWeekMutationOptions = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activateWeek>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof activateWeek>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["activateWeek"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activateWeek>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return activateWeek(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ActivateWeekMutationResult = NonNullable<
  Awaited<ReturnType<typeof activateWeek>>
>;

export type ActivateWeekMutationError = ErrorResponse | ErrorResponse;

/**
 * @summary Activate a week
 */
export const useActivateWeek = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof activateWeek>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof activateWeek>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getActivateWeekMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
