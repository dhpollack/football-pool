/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type {
  ErrorResponse,
  WeekListResponse,
  WeekResponse,
} from "../../model";

export const getListWeeksResponseMock = (
  overrideResponse: Partial<WeekListResponse> = {},
): WeekListResponse => ({
  weeks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    week_number: faker.number.int({ min: undefined, max: undefined }),
    season: faker.number.int({ min: undefined, max: undefined }),
    week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    is_active: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  ...overrideResponse,
});

export const getListWeeksResponseMock200 = (
  overrideResponse: Partial<WeekListResponse> = {},
): WeekListResponse => ({
  weeks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    week_number: faker.number.int({ min: undefined, max: undefined }),
    season: faker.number.int({ min: undefined, max: undefined }),
    week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    is_active: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  ...overrideResponse,
});

export const getListWeeksResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateWeekResponseMock = (
  overrideResponse: Partial<WeekResponse> = {},
): WeekResponse => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  week_number: faker.number.int({ min: undefined, max: undefined }),
  season: faker.number.int({ min: undefined, max: undefined }),
  week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  is_active: faker.datatype.boolean(),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getCreateWeekResponseMock201 = (
  overrideResponse: Partial<WeekResponse> = {},
): WeekResponse => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  week_number: faker.number.int({ min: undefined, max: undefined }),
  season: faker.number.int({ min: undefined, max: undefined }),
  week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  is_active: faker.datatype.boolean(),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getCreateWeekResponseMock400 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateWeekResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateWeekResponseMock = (
  overrideResponse: Partial<WeekResponse> = {},
): WeekResponse => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  week_number: faker.number.int({ min: undefined, max: undefined }),
  season: faker.number.int({ min: undefined, max: undefined }),
  week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  is_active: faker.datatype.boolean(),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getUpdateWeekResponseMock200 = (
  overrideResponse: Partial<WeekResponse> = {},
): WeekResponse => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  week_number: faker.number.int({ min: undefined, max: undefined }),
  season: faker.number.int({ min: undefined, max: undefined }),
  week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  is_active: faker.datatype.boolean(),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getUpdateWeekResponseMock400 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateWeekResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateWeekResponseMock404 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteWeekResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteWeekResponseMock404 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getActivateWeekResponseMock = (
  overrideResponse: Partial<WeekResponse> = {},
): WeekResponse => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  week_number: faker.number.int({ min: undefined, max: undefined }),
  season: faker.number.int({ min: undefined, max: undefined }),
  week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  is_active: faker.datatype.boolean(),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getActivateWeekResponseMock200 = (
  overrideResponse: Partial<WeekResponse> = {},
): WeekResponse => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  week_number: faker.number.int({ min: undefined, max: undefined }),
  season: faker.number.int({ min: undefined, max: undefined }),
  week_start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  week_end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  is_active: faker.datatype.boolean(),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getActivateWeekResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getActivateWeekResponseMock404 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListWeeksMockHandler = (
  overrideResponse?:
    | WeekListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<WeekListResponse> | WeekListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/weeks",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListWeeksResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getListWeeksMockHandler200 = (
  overrideResponse?:
    | WeekListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<WeekListResponse> | WeekListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/weeks",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListWeeksResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getListWeeksMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/weeks",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListWeeksResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getCreateWeekMockHandler = (
  overrideResponse?:
    | WeekResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WeekResponse> | WeekResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateWeekResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getCreateWeekMockHandler201 = (
  overrideResponse?:
    | WeekResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WeekResponse> | WeekResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateWeekResponseMock201(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getCreateWeekMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateWeekResponseMock400(),
        ),
        { status: 400, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getCreateWeekMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateWeekResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getUpdateWeekMockHandler = (
  overrideResponse?:
    | WeekResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<WeekResponse> | WeekResponse),
  options?: RequestHandlerOptions,
) => {
  return http.put(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateWeekResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getUpdateWeekMockHandler200 = (
  overrideResponse?:
    | WeekResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<WeekResponse> | WeekResponse),
  options?: RequestHandlerOptions,
) => {
  return http.put(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateWeekResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getUpdateWeekMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.put(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateWeekResponseMock400(),
        ),
        { status: 400, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getUpdateWeekMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.put(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateWeekResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getUpdateWeekMockHandler404 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.put(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateWeekResponseMock404(),
        ),
        { status: 404, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getDeleteWeekMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getDeleteWeekMockHandler204 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getDeleteWeekMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteWeekResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getDeleteWeekMockHandler404 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/api/admin/weeks/:id",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteWeekResponseMock404(),
        ),
        { status: 404, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getActivateWeekMockHandler = (
  overrideResponse?:
    | WeekResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WeekResponse> | WeekResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks/:id/activate",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getActivateWeekResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getActivateWeekMockHandler200 = (
  overrideResponse?:
    | WeekResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<WeekResponse> | WeekResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks/:id/activate",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getActivateWeekResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getActivateWeekMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks/:id/activate",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getActivateWeekResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getActivateWeekMockHandler404 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/weeks/:id/activate",
    async (info) => {
      await delay(100);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getActivateWeekResponseMock404(),
        ),
        { status: 404, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getAdminMock = () => [
  getListWeeksMockHandler(),
  getCreateWeekMockHandler(),
  getUpdateWeekMockHandler(),
  getDeleteWeekMockHandler(),
  getActivateWeekMockHandler(),
];
