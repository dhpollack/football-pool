/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type {
  ErrorResponse,
  PickListResponse,
  PickResponse,
} from "../../model";

export const getGetPicksResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getGetPicksResponseMock200 = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getGetPicksResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSubmitPicksResponseMock = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getSubmitPicksResponseMock201 = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getSubmitPicksResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAdminSubmitPicksResponseMock = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getAdminSubmitPicksResponseMock201 = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getAdminSubmitPicksResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAdminListPicksResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getAdminListPicksResponseMock200 = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getAdminListPicksResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAdminGetPicksByWeekResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByWeekResponseMock200 = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByWeekResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAdminGetPicksByUserResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByUserResponseMock200 = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    user_id: faker.number.int({ min: undefined, max: undefined }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({ min: undefined, max: undefined }),
            user_id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({ min: undefined, max: undefined }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        week: faker.number.int({ min: undefined, max: undefined }),
        season: faker.number.int({ min: undefined, max: undefined }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({ min: undefined, max: undefined }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({ min: undefined, max: undefined }),
    limit: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    pages: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByUserResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAdminDeletePickResponseMock401 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetPicksMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/picks",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetPicksResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetPicksMockHandler200 = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/picks",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetPicksResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetPicksMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/picks",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetPicksResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getSubmitPicksMockHandler = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/picks/submit",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSubmitPicksResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getSubmitPicksMockHandler201 = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/picks/submit",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSubmitPicksResponseMock201(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getSubmitPicksMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/picks/submit",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSubmitPicksResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminSubmitPicksMockHandler = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/picks/submit",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminSubmitPicksResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminSubmitPicksMockHandler201 = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/picks/submit",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminSubmitPicksResponseMock201(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminSubmitPicksMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/admin/picks/submit",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminSubmitPicksResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminListPicksMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminListPicksResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminListPicksMockHandler200 = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminListPicksResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminListPicksMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminListPicksResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminGetPicksByWeekMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks/week/:week",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminGetPicksByWeekResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminGetPicksByWeekMockHandler200 = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks/week/:week",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminGetPicksByWeekResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminGetPicksByWeekMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks/week/:week",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminGetPicksByWeekResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminGetPicksByUserMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks/user/:userID",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminGetPicksByUserResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminGetPicksByUserMockHandler200 = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks/user/:userID",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminGetPicksByUserResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminGetPicksByUserMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/admin/picks/user/:userID",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminGetPicksByUserResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getAdminDeletePickMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/api/admin/picks/:id",
    async (info) => {
      await delay(10);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getAdminDeletePickMockHandler204 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/api/admin/picks/:id",
    async (info) => {
      await delay(10);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 204 });
    },
    options,
  );
};

export const getAdminDeletePickMockHandler401 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/api/admin/picks/:id",
    async (info) => {
      await delay(10);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getAdminDeletePickResponseMock401(),
        ),
        { status: 401, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getPicksMock = () => [
  getGetPicksMockHandler(),
  getSubmitPicksMockHandler(),
  getAdminSubmitPicksMockHandler(),
  getAdminListPicksMockHandler(),
  getAdminGetPicksByWeekMockHandler(),
  getAdminGetPicksByUserMockHandler(),
  getAdminDeletePickMockHandler(),
];
