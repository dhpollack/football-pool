/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { PickListResponse, PickResponse } from "../../model";

export const getGetPicksResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getSubmitPicksResponseMock = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getAdminSubmitPicksResponseMock = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getAdminListPicksResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByWeekResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByUserResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetPicksMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/picks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPicksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSubmitPicksMockHandler = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
) => {
  return http.post("*/api/picks/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSubmitPicksResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminSubmitPicksMockHandler = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
) => {
  return http.post("*/api/admin/picks/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminSubmitPicksResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminListPicksMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/admin/picks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminListPicksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminGetPicksByWeekMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/admin/picks/week/:week", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminGetPicksByWeekResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminGetPicksByUserMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/admin/picks/user/:userId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminGetPicksByUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminDeletePickMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/api/admin/picks/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getPicksMock = () => [
  getGetPicksMockHandler(),
  getSubmitPicksMockHandler(),
  getAdminSubmitPicksMockHandler(),
  getAdminListPicksMockHandler(),
  getAdminGetPicksByWeekMockHandler(),
  getAdminGetPicksByUserMockHandler(),
  getAdminDeletePickMockHandler(),
];
