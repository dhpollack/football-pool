/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ErrorResponse,
  PickListResponse,
  PickRequest,
  PickResponse,
} from "../../model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get user picks
 */
export const getPicks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/picks`, method: "GET", signal },
    options,
  );
};

export const getGetPicksQueryKey = () => {
  return [`/api/picks`] as const;
};

export const getGetPicksQueryOptions = <
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPicksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPicks>>> = ({
    signal,
  }) => getPicks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPicks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPicksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPicks>>
>;
export type GetPicksQueryError = ErrorResponse;

export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPicks>>,
          TError,
          Awaited<ReturnType<typeof getPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPicks>>,
          TError,
          Awaited<ReturnType<typeof getPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user picks
 */

export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPicksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Submit picks
 */
export const submitPicks = (
  pickRequest: PickRequest[],
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickResponse[]>(
    {
      url: `/api/picks/submit`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: pickRequest,
      signal,
    },
    options,
  );
};

export const getSubmitPicksMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitPicks>>,
    TError,
    { data: PickRequest[] },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationKey = ["submitPicks"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitPicks>>,
    { data: PickRequest[] }
  > = (props) => {
    const { data } = props ?? {};

    return submitPicks(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitPicksMutationResult = NonNullable<
  Awaited<ReturnType<typeof submitPicks>>
>;
export type SubmitPicksMutationBody = PickRequest[];
export type SubmitPicksMutationError = ErrorResponse;

/**
 * @summary Submit picks
 */
export const useSubmitPicks = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof submitPicks>>,
      TError,
      { data: PickRequest[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof submitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationOptions = getSubmitPicksMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Admin submit picks
 */
export const adminSubmitPicks = (
  pickRequest: PickRequest[],
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickResponse[]>(
    {
      url: `/api/admin/picks/submit`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: pickRequest,
      signal,
    },
    options,
  );
};

export const getAdminSubmitPicksMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminSubmitPicks>>,
    TError,
    { data: PickRequest[] },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminSubmitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationKey = ["adminSubmitPicks"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminSubmitPicks>>,
    { data: PickRequest[] }
  > = (props) => {
    const { data } = props ?? {};

    return adminSubmitPicks(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminSubmitPicksMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminSubmitPicks>>
>;
export type AdminSubmitPicksMutationBody = PickRequest[];
export type AdminSubmitPicksMutationError = ErrorResponse;

/**
 * @summary Admin submit picks
 */
export const useAdminSubmitPicks = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminSubmitPicks>>,
      TError,
      { data: PickRequest[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminSubmitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationOptions = getAdminSubmitPicksMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Admin list picks
 */
export const adminListPicks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/admin/picks`, method: "GET", signal },
    options,
  );
};

export const getAdminListPicksQueryKey = () => {
  return [`/api/admin/picks`] as const;
};

export const getAdminListPicksQueryOptions = <
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminListPicksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminListPicks>>> = ({
    signal,
  }) => adminListPicks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminListPicks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminListPicksQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminListPicks>>
>;
export type AdminListPicksQueryError = ErrorResponse;

export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListPicks>>,
          TError,
          Awaited<ReturnType<typeof adminListPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListPicks>>,
          TError,
          Awaited<ReturnType<typeof adminListPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin list picks
 */

export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminListPicksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin get picks by week
 */
export const adminGetPicksByWeek = (
  week: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/admin/picks/week/${week}`, method: "GET", signal },
    options,
  );
};

export const getAdminGetPicksByWeekQueryKey = (week?: number) => {
  return [`/api/admin/picks/week/${week}`] as const;
};

export const getAdminGetPicksByWeekQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminGetPicksByWeekQueryKey(week);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminGetPicksByWeek>>
  > = ({ signal }) => adminGetPicksByWeek(week, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!week,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetPicksByWeek>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminGetPicksByWeekQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetPicksByWeek>>
>;
export type AdminGetPicksByWeekQueryError = ErrorResponse;

export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByWeek>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByWeek>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByWeek>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByWeek>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin get picks by week
 */

export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminGetPicksByWeekQueryOptions(week, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin get picks by user
 */
export const adminGetPicksByUser = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/admin/picks/user/${userId}`, method: "GET", signal },
    options,
  );
};

export const getAdminGetPicksByUserQueryKey = (userId?: number) => {
  return [`/api/admin/picks/user/${userId}`] as const;
};

export const getAdminGetPicksByUserQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminGetPicksByUserQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminGetPicksByUser>>
  > = ({ signal }) => adminGetPicksByUser(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetPicksByUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminGetPicksByUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetPicksByUser>>
>;
export type AdminGetPicksByUserQueryError = ErrorResponse;

export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByUser>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByUser>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin get picks by user
 */

export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminGetPicksByUserQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin delete pick
 */
export const adminDeletePick = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/admin/picks/${id}`, method: "DELETE" },
    options,
  );
};

export const getAdminDeletePickMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeletePick>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeletePick>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["adminDeletePick"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeletePick>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return adminDeletePick(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeletePickMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeletePick>>
>;

export type AdminDeletePickMutationError = ErrorResponse;

/**
 * @summary Admin delete pick
 */
export const useAdminDeletePick = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminDeletePick>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminDeletePick>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getAdminDeletePickMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
