/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  LoginResponse,
  RegisterResponse,
  UserListResponse,
  UserResponse,
} from "../../model";

export const getLoginUserResponseMock = (
  overrideResponse: Partial<LoginResponse> = {},
): LoginResponse => ({
  token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user: {
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    role: faker.string.alpha({ length: { min: 10, max: 20 } }),
    player: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        user_id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        address: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      undefined,
    ]),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  },
  ...overrideResponse,
});

export const getRegisterUserResponseMock = (
  overrideResponse: Partial<RegisterResponse> = {},
): RegisterResponse => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetProfileResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getUpdateProfileResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getAdminListUsersResponseMock = (
  overrideResponse: Partial<UserListResponse> = {},
): UserListResponse => ({
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    role: faker.string.alpha({ length: { min: 10, max: 20 } }),
    player: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        user_id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        address: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      undefined,
    ]),
    pick_count: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_wins: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminGetUserResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getAdminUpdateUserResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getLoginUserMockHandler = (
  overrideResponse?:
    | LoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LoginResponse> | LoginResponse),
) => {
  return http.post("*/api/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLoginUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLogoutUserMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.post("*/api/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getRegisterUserMockHandler = (
  overrideResponse?:
    | RegisterResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RegisterResponse> | RegisterResponse),
) => {
  return http.post("*/api/register", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getRegisterUserResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetProfileMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.get("*/api/users/me", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateProfileMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.put("*/api/users/me/update", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteUserMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/api/admin/users/delete", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAdminListUsersMockHandler = (
  overrideResponse?:
    | UserListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserListResponse> | UserListResponse),
) => {
  return http.get("*/api/admin/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminListUsersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminGetUserMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.get("*/api/admin/users/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminGetUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminUpdateUserMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.put("*/api/admin/users/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminUpdateUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getUserMock = () => [
  getLoginUserMockHandler(),
  getLogoutUserMockHandler(),
  getRegisterUserMockHandler(),
  getGetProfileMockHandler(),
  getUpdateProfileMockHandler(),
  getDeleteUserMockHandler(),
  getAdminListUsersMockHandler(),
  getAdminGetUserMockHandler(),
  getAdminUpdateUserMockHandler(),
];
