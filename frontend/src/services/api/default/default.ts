/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  DeleteUserParams,
  ErrorResponse,
  GameListResponse,
  GameRequest,
  GameResponse,
  GetGamesParams,
  GetSeasonResultsParams,
  GetWeeklyResultsParams,
  LoginRequest,
  LoginResponse,
  PickListResponse,
  PickRequest,
  PickResponse,
  PlayerRequest,
  RegisterRequest,
  RegisterResponse,
  ResultRequest,
  ResultResponse,
  SurvivorPickRequest,
  SurvivorPickResponse,
  UserListResponse,
  UserRequest,
  UserResponse,
} from "../../model";

import { customInstance } from "../../custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Login a user
 */
export const loginUser = (
  loginRequest: LoginRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LoginResponse>(
    {
      url: `/api/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginRequest,
      signal,
    },
    options,
  );
};

export const getLoginUserMutationOptions = <
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["loginUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginUser>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return loginUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserMutationBody = LoginRequest;
export type LoginUserMutationError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

/**
 * @summary Login a user
 */
export const useLoginUser = <
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginUser>>,
      TError,
      { data: LoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getLoginUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Logout a user
 */
export const logoutUser = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/logout`, method: "POST", signal },
    options,
  );
};

export const getLogoutUserMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logoutUser>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["logoutUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logoutUser>>,
    void
  > = () => {
    return logoutUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof logoutUser>>
>;

export type LogoutUserMutationError = ErrorResponse;

/**
 * @summary Logout a user
 */
export const useLogoutUser = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof logoutUser>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof logoutUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Register a new user
 */
export const registerUser = (
  registerRequest: RegisterRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<RegisterResponse>(
    {
      url: `/api/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerRequest,
      signal,
    },
    options,
  );
};

export const getRegisterUserMutationOptions = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerUser>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerUser>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["registerUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerUser>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerUser>>
>;
export type RegisterUserMutationBody = RegisterRequest;
export type RegisterUserMutationError = ErrorResponse | ErrorResponse;

/**
 * @summary Register a new user
 */
export const useRegisterUser = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerUser>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerUser>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getRegisterUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Health check
 */
export const healthCheck = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/health`, method: "GET", signal },
    options,
  );
};

export const getHealthCheckQueryKey = () => {
  return [`/api/health`] as const;
};

export const getHealthCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthCheckQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({
    signal,
  }) => healthCheck(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthCheck>>
>;
export type HealthCheckQueryError = ErrorResponse;

export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Health check
 */

export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHealthCheckQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user profile
 */
export const getProfile = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>(
    { url: `/api/users/me`, method: "GET", signal },
    options,
  );
};

export const getGetProfileQueryKey = () => {
  return [`/api/users/me`] as const;
};

export const getGetProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getProfile>>,
  TError = ErrorResponse | ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfile>>> = ({
    signal,
  }) => getProfile(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProfile>>
>;
export type GetProfileQueryError = ErrorResponse | ErrorResponse;

export function useGetProfile<
  TData = Awaited<ReturnType<typeof getProfile>>,
  TError = ErrorResponse | ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfile>>,
          TError,
          Awaited<ReturnType<typeof getProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfile<
  TData = Awaited<ReturnType<typeof getProfile>>,
  TError = ErrorResponse | ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfile>>,
          TError,
          Awaited<ReturnType<typeof getProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProfile<
  TData = Awaited<ReturnType<typeof getProfile>>,
  TError = ErrorResponse | ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user profile
 */

export function useGetProfile<
  TData = Awaited<ReturnType<typeof getProfile>>,
  TError = ErrorResponse | ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update user profile
 */
export const updateProfile = (
  playerRequest: PlayerRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserResponse>(
    {
      url: `/api/users/me/update`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: playerRequest,
    },
    options,
  );
};

export const getUpdateProfileMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProfile>>,
    TError,
    { data: PlayerRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProfile>>,
  TError,
  { data: PlayerRequest },
  TContext
> => {
  const mutationKey = ["updateProfile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProfile>>,
    { data: PlayerRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateProfile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProfile>>
>;
export type UpdateProfileMutationBody = PlayerRequest;
export type UpdateProfileMutationError = ErrorResponse;

/**
 * @summary Update user profile
 */
export const useUpdateProfile = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateProfile>>,
      TError,
      { data: PlayerRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateProfile>>,
  TError,
  { data: PlayerRequest },
  TContext
> => {
  const mutationOptions = getUpdateProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get games by week and season
 */
export const getGames = (
  params: GetGamesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameListResponse>(
    { url: `/api/games`, method: "GET", params, signal },
    options,
  );
};

export const getGetGamesQueryKey = (params?: GetGamesParams) => {
  return [`/api/games`, ...(params ? [params] : [])] as const;
};

export const getGetGamesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGamesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGames>>> = ({
    signal,
  }) => getGames(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGames>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGamesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGames>>
>;
export type GetGamesQueryError = ErrorResponse;

export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGames>>,
          TError,
          Awaited<ReturnType<typeof getGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGames>>,
          TError,
          Awaited<ReturnType<typeof getGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get games by week and season
 */

export function useGetGames<
  TData = Awaited<ReturnType<typeof getGames>>,
  TError = ErrorResponse,
>(
  params: GetGamesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGamesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create new games
 */
export const createGame = (
  gameRequest: GameRequest[],
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameResponse[]>(
    {
      url: `/api/games/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: gameRequest,
      signal,
    },
    options,
  );
};

export const getCreateGameMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGame>>,
    TError,
    { data: GameRequest[] },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createGame>>,
  TError,
  { data: GameRequest[] },
  TContext
> => {
  const mutationKey = ["createGame"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createGame>>,
    { data: GameRequest[] }
  > = (props) => {
    const { data } = props ?? {};

    return createGame(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGame>>
>;
export type CreateGameMutationBody = GameRequest[];
export type CreateGameMutationError = ErrorResponse;

/**
 * @summary Create new games
 */
export const useCreateGame = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createGame>>,
      TError,
      { data: GameRequest[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createGame>>,
  TError,
  { data: GameRequest[] },
  TContext
> => {
  const mutationOptions = getCreateGameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get user picks
 */
export const getPicks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/picks`, method: "GET", signal },
    options,
  );
};

export const getGetPicksQueryKey = () => {
  return [`/api/picks`] as const;
};

export const getGetPicksQueryOptions = <
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPicksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPicks>>> = ({
    signal,
  }) => getPicks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPicks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPicksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPicks>>
>;
export type GetPicksQueryError = ErrorResponse;

export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPicks>>,
          TError,
          Awaited<ReturnType<typeof getPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPicks>>,
          TError,
          Awaited<ReturnType<typeof getPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user picks
 */

export function useGetPicks<
  TData = Awaited<ReturnType<typeof getPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPicksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Submit picks
 */
export const submitPicks = (
  pickRequest: PickRequest[],
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickResponse[]>(
    {
      url: `/api/picks/submit`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: pickRequest,
      signal,
    },
    options,
  );
};

export const getSubmitPicksMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitPicks>>,
    TError,
    { data: PickRequest[] },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationKey = ["submitPicks"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitPicks>>,
    { data: PickRequest[] }
  > = (props) => {
    const { data } = props ?? {};

    return submitPicks(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitPicksMutationResult = NonNullable<
  Awaited<ReturnType<typeof submitPicks>>
>;
export type SubmitPicksMutationBody = PickRequest[];
export type SubmitPicksMutationError = ErrorResponse;

/**
 * @summary Submit picks
 */
export const useSubmitPicks = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof submitPicks>>,
      TError,
      { data: PickRequest[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof submitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationOptions = getSubmitPicksMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Admin submit picks
 */
export const adminSubmitPicks = (
  pickRequest: PickRequest[],
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickResponse[]>(
    {
      url: `/api/admin/picks/submit`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: pickRequest,
      signal,
    },
    options,
  );
};

export const getAdminSubmitPicksMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminSubmitPicks>>,
    TError,
    { data: PickRequest[] },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminSubmitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationKey = ["adminSubmitPicks"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminSubmitPicks>>,
    { data: PickRequest[] }
  > = (props) => {
    const { data } = props ?? {};

    return adminSubmitPicks(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminSubmitPicksMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminSubmitPicks>>
>;
export type AdminSubmitPicksMutationBody = PickRequest[];
export type AdminSubmitPicksMutationError = ErrorResponse;

/**
 * @summary Admin submit picks
 */
export const useAdminSubmitPicks = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminSubmitPicks>>,
      TError,
      { data: PickRequest[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminSubmitPicks>>,
  TError,
  { data: PickRequest[] },
  TContext
> => {
  const mutationOptions = getAdminSubmitPicksMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get weekly results
 */
export const getWeeklyResults = (
  params: GetWeeklyResultsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ResultResponse[]>(
    { url: `/api/results/week`, method: "GET", params, signal },
    options,
  );
};

export const getGetWeeklyResultsQueryKey = (
  params?: GetWeeklyResultsParams,
) => {
  return [`/api/results/week`, ...(params ? [params] : [])] as const;
};

export const getGetWeeklyResultsQueryOptions = <
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWeeklyResultsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWeeklyResults>>
  > = ({ signal }) => getWeeklyResults(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWeeklyResults>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWeeklyResultsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWeeklyResults>>
>;
export type GetWeeklyResultsQueryError = ErrorResponse;

export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeeklyResults>>,
          TError,
          Awaited<ReturnType<typeof getWeeklyResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeeklyResults>>,
          TError,
          Awaited<ReturnType<typeof getWeeklyResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get weekly results
 */

export function useGetWeeklyResults<
  TData = Awaited<ReturnType<typeof getWeeklyResults>>,
  TError = ErrorResponse,
>(
  params: GetWeeklyResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWeeklyResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWeeklyResultsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get season results
 */
export const getSeasonResults = (
  params: GetSeasonResultsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ResultResponse[]>(
    { url: `/api/results/season`, method: "GET", params, signal },
    options,
  );
};

export const getGetSeasonResultsQueryKey = (
  params?: GetSeasonResultsParams,
) => {
  return [`/api/results/season`, ...(params ? [params] : [])] as const;
};

export const getGetSeasonResultsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSeasonResultsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSeasonResults>>
  > = ({ signal }) => getSeasonResults(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSeasonResults>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSeasonResultsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSeasonResults>>
>;
export type GetSeasonResultsQueryError = ErrorResponse;

export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSeasonResults>>,
          TError,
          Awaited<ReturnType<typeof getSeasonResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSeasonResults>>,
          TError,
          Awaited<ReturnType<typeof getSeasonResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get season results
 */

export function useGetSeasonResults<
  TData = Awaited<ReturnType<typeof getSeasonResults>>,
  TError = ErrorResponse,
>(
  params: GetSeasonResultsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSeasonResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSeasonResultsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Submit a result
 */
export const submitResult = (
  resultRequest: ResultRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ResultResponse>(
    {
      url: `/api/results`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: resultRequest,
      signal,
    },
    options,
  );
};

export const getSubmitResultMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitResult>>,
    TError,
    { data: ResultRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitResult>>,
  TError,
  { data: ResultRequest },
  TContext
> => {
  const mutationKey = ["submitResult"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitResult>>,
    { data: ResultRequest }
  > = (props) => {
    const { data } = props ?? {};

    return submitResult(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitResultMutationResult = NonNullable<
  Awaited<ReturnType<typeof submitResult>>
>;
export type SubmitResultMutationBody = ResultRequest;
export type SubmitResultMutationError = ErrorResponse;

/**
 * @summary Submit a result
 */
export const useSubmitResult = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof submitResult>>,
      TError,
      { data: ResultRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof submitResult>>,
  TError,
  { data: ResultRequest },
  TContext
> => {
  const mutationOptions = getSubmitResultMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get survivor picks
 */
export const getSurvivorPicks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SurvivorPickResponse[]>(
    { url: `/api/survivor/picks`, method: "GET", signal },
    options,
  );
};

export const getGetSurvivorPicksQueryKey = () => {
  return [`/api/survivor/picks`] as const;
};

export const getGetSurvivorPicksQueryOptions = <
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getSurvivorPicks>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSurvivorPicksQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSurvivorPicks>>
  > = ({ signal }) => getSurvivorPicks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSurvivorPicks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSurvivorPicksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSurvivorPicks>>
>;
export type GetSurvivorPicksQueryError = ErrorResponse;

export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSurvivorPicks>>,
          TError,
          Awaited<ReturnType<typeof getSurvivorPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSurvivorPicks>>,
          TError,
          Awaited<ReturnType<typeof getSurvivorPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get survivor picks
 */

export function useGetSurvivorPicks<
  TData = Awaited<ReturnType<typeof getSurvivorPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurvivorPicks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetSurvivorPicksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Submit survivor pick
 */
export const submitSurvivorPick = (
  survivorPickRequest: SurvivorPickRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SurvivorPickResponse>(
    {
      url: `/api/survivor/picks/submit`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: survivorPickRequest,
      signal,
    },
    options,
  );
};

export const getSubmitSurvivorPickMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitSurvivorPick>>,
    TError,
    { data: SurvivorPickRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitSurvivorPick>>,
  TError,
  { data: SurvivorPickRequest },
  TContext
> => {
  const mutationKey = ["submitSurvivorPick"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitSurvivorPick>>,
    { data: SurvivorPickRequest }
  > = (props) => {
    const { data } = props ?? {};

    return submitSurvivorPick(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitSurvivorPickMutationResult = NonNullable<
  Awaited<ReturnType<typeof submitSurvivorPick>>
>;
export type SubmitSurvivorPickMutationBody = SurvivorPickRequest;
export type SubmitSurvivorPickMutationError = ErrorResponse;

/**
 * @summary Submit survivor pick
 */
export const useSubmitSurvivorPick = <
  TError = ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof submitSurvivorPick>>,
      TError,
      { data: SurvivorPickRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof submitSurvivorPick>>,
  TError,
  { data: SurvivorPickRequest },
  TContext
> => {
  const mutationOptions = getSubmitSurvivorPickMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Debug get users
 */
export const debugGetUsers = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserListResponse>(
    { url: `/api/debug/users`, method: "GET", signal },
    options,
  );
};

export const getDebugGetUsersQueryKey = () => {
  return [`/api/debug/users`] as const;
};

export const getDebugGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof debugGetUsers>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof debugGetUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDebugGetUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof debugGetUsers>>> = ({
    signal,
  }) => debugGetUsers(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof debugGetUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type DebugGetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof debugGetUsers>>
>;
export type DebugGetUsersQueryError = ErrorResponse;

export function useDebugGetUsers<
  TData = Awaited<ReturnType<typeof debugGetUsers>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof debugGetUsers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof debugGetUsers>>,
          TError,
          Awaited<ReturnType<typeof debugGetUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDebugGetUsers<
  TData = Awaited<ReturnType<typeof debugGetUsers>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof debugGetUsers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof debugGetUsers>>,
          TError,
          Awaited<ReturnType<typeof debugGetUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useDebugGetUsers<
  TData = Awaited<ReturnType<typeof debugGetUsers>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof debugGetUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Debug get users
 */

export function useDebugGetUsers<
  TData = Awaited<ReturnType<typeof debugGetUsers>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof debugGetUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getDebugGetUsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete a user
 */
export const deleteUser = (
  params: DeleteUserParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/admin/users/delete`, method: "DELETE", params },
    options,
  );
};

export const getDeleteUserMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { params: DeleteUserParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { params: DeleteUserParams },
  TContext
> => {
  const mutationKey = ["deleteUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUser>>,
    { params: DeleteUserParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteUser(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = ErrorResponse;

/**
 * @summary Delete a user
 */
export const useDeleteUser = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUser>>,
      TError,
      { params: DeleteUserParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { params: DeleteUserParams },
  TContext
> => {
  const mutationOptions = getDeleteUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Admin list games
 */
export const adminListGames = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GameListResponse>(
    { url: `/api/admin/games`, method: "GET", signal },
    options,
  );
};

export const getAdminListGamesQueryKey = () => {
  return [`/api/admin/games`] as const;
};

export const getAdminListGamesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminListGamesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminListGames>>> = ({
    signal,
  }) => adminListGames(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminListGames>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminListGamesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminListGames>>
>;
export type AdminListGamesQueryError = ErrorResponse;

export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListGames>>,
          TError,
          Awaited<ReturnType<typeof adminListGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListGames>>,
          TError,
          Awaited<ReturnType<typeof adminListGames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin list games
 */

export function useAdminListGames<
  TData = Awaited<ReturnType<typeof adminListGames>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListGames>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminListGamesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update game
 */
export const updateGame = (
  id: number,
  gameRequest: GameRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GameResponse>(
    {
      url: `/api/admin/games/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: gameRequest,
    },
    options,
  );
};

export const getUpdateGameMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateGame>>,
    TError,
    { id: number; data: GameRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateGame>>,
  TError,
  { id: number; data: GameRequest },
  TContext
> => {
  const mutationKey = ["updateGame"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateGame>>,
    { id: number; data: GameRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateGame(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGame>>
>;
export type UpdateGameMutationBody = GameRequest;
export type UpdateGameMutationError = ErrorResponse;

/**
 * @summary Update game
 */
export const useUpdateGame = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateGame>>,
      TError,
      { id: number; data: GameRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateGame>>,
  TError,
  { id: number; data: GameRequest },
  TContext
> => {
  const mutationOptions = getUpdateGameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete game
 */
export const deleteGame = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/admin/games/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteGameMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGame>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGame>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteGame"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGame>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteGame(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGame>>
>;

export type DeleteGameMutationError = ErrorResponse;

/**
 * @summary Delete game
 */
export const useDeleteGame = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteGame>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteGame>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteGameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Admin list picks
 */
export const adminListPicks = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/admin/picks`, method: "GET", signal },
    options,
  );
};

export const getAdminListPicksQueryKey = () => {
  return [`/api/admin/picks`] as const;
};

export const getAdminListPicksQueryOptions = <
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminListPicksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminListPicks>>> = ({
    signal,
  }) => adminListPicks(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminListPicks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminListPicksQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminListPicks>>
>;
export type AdminListPicksQueryError = ErrorResponse;

export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListPicks>>,
          TError,
          Awaited<ReturnType<typeof adminListPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListPicks>>,
          TError,
          Awaited<ReturnType<typeof adminListPicks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin list picks
 */

export function useAdminListPicks<
  TData = Awaited<ReturnType<typeof adminListPicks>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListPicks>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminListPicksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin get picks by week
 */
export const adminGetPicksByWeek = (
  week: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/admin/picks/week/${week}`, method: "GET", signal },
    options,
  );
};

export const getAdminGetPicksByWeekQueryKey = (week?: number) => {
  return [`/api/admin/picks/week/${week}`] as const;
};

export const getAdminGetPicksByWeekQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminGetPicksByWeekQueryKey(week);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminGetPicksByWeek>>
  > = ({ signal }) => adminGetPicksByWeek(week, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!week,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetPicksByWeek>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminGetPicksByWeekQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetPicksByWeek>>
>;
export type AdminGetPicksByWeekQueryError = ErrorResponse;

export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByWeek>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByWeek>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByWeek>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByWeek>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin get picks by week
 */

export function useAdminGetPicksByWeek<
  TData = Awaited<ReturnType<typeof adminGetPicksByWeek>>,
  TError = ErrorResponse,
>(
  week: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByWeek>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminGetPicksByWeekQueryOptions(week, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin get picks by user
 */
export const adminGetPicksByUser = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PickListResponse>(
    { url: `/api/admin/picks/user/${userId}`, method: "GET", signal },
    options,
  );
};

export const getAdminGetPicksByUserQueryKey = (userId?: number) => {
  return [`/api/admin/picks/user/${userId}`] as const;
};

export const getAdminGetPicksByUserQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminGetPicksByUserQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminGetPicksByUser>>
  > = ({ signal }) => adminGetPicksByUser(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetPicksByUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminGetPicksByUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetPicksByUser>>
>;
export type AdminGetPicksByUserQueryError = ErrorResponse;

export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByUser>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetPicksByUser>>,
          TError,
          Awaited<ReturnType<typeof adminGetPicksByUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin get picks by user
 */

export function useAdminGetPicksByUser<
  TData = Awaited<ReturnType<typeof adminGetPicksByUser>>,
  TError = ErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminGetPicksByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminGetPicksByUserQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin delete pick
 */
export const adminDeletePick = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/admin/picks/${id}`, method: "DELETE" },
    options,
  );
};

export const getAdminDeletePickMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminDeletePick>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminDeletePick>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["adminDeletePick"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminDeletePick>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return adminDeletePick(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminDeletePickMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminDeletePick>>
>;

export type AdminDeletePickMutationError = ErrorResponse;

/**
 * @summary Admin delete pick
 */
export const useAdminDeletePick = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminDeletePick>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminDeletePick>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getAdminDeletePickMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Admin list users
 */
export const adminListUsers = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserListResponse>(
    { url: `/api/admin/users`, method: "GET", signal },
    options,
  );
};

export const getAdminListUsersQueryKey = () => {
  return [`/api/admin/users`] as const;
};

export const getAdminListUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof adminListUsers>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminListUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminListUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminListUsers>>> = ({
    signal,
  }) => adminListUsers(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminListUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminListUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminListUsers>>
>;
export type AdminListUsersQueryError = ErrorResponse;

export function useAdminListUsers<
  TData = Awaited<ReturnType<typeof adminListUsers>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListUsers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListUsers>>,
          TError,
          Awaited<ReturnType<typeof adminListUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListUsers<
  TData = Awaited<ReturnType<typeof adminListUsers>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListUsers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminListUsers>>,
          TError,
          Awaited<ReturnType<typeof adminListUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminListUsers<
  TData = Awaited<ReturnType<typeof adminListUsers>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin list users
 */

export function useAdminListUsers<
  TData = Awaited<ReturnType<typeof adminListUsers>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminListUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminListUsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin get user
 */
export const adminGetUser = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>(
    { url: `/api/admin/users/${id}`, method: "GET", signal },
    options,
  );
};

export const getAdminGetUserQueryKey = (id?: number) => {
  return [`/api/admin/users/${id}`] as const;
};

export const getAdminGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetUser>>,
  TError = ErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminGetUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetUserQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetUser>>> = ({
    signal,
  }) => adminGetUser(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetUser>>
>;
export type AdminGetUserQueryError = ErrorResponse;

export function useAdminGetUser<
  TData = Awaited<ReturnType<typeof adminGetUser>>,
  TError = ErrorResponse,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminGetUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetUser>>,
          TError,
          Awaited<ReturnType<typeof adminGetUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetUser<
  TData = Awaited<ReturnType<typeof adminGetUser>>,
  TError = ErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminGetUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminGetUser>>,
          TError,
          Awaited<ReturnType<typeof adminGetUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetUser<
  TData = Awaited<ReturnType<typeof adminGetUser>>,
  TError = ErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminGetUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin get user
 */

export function useAdminGetUser<
  TData = Awaited<ReturnType<typeof adminGetUser>>,
  TError = ErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminGetUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminGetUserQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Admin update user
 */
export const adminUpdateUser = (
  id: number,
  userRequest: UserRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserResponse>(
    {
      url: `/api/admin/users/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: userRequest,
    },
    options,
  );
};

export const getAdminUpdateUserMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminUpdateUser>>,
    TError,
    { id: number; data: UserRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminUpdateUser>>,
  TError,
  { id: number; data: UserRequest },
  TContext
> => {
  const mutationKey = ["adminUpdateUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminUpdateUser>>,
    { id: number; data: UserRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return adminUpdateUser(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminUpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminUpdateUser>>
>;
export type AdminUpdateUserMutationBody = UserRequest;
export type AdminUpdateUserMutationError = ErrorResponse;

/**
 * @summary Admin update user
 */
export const useAdminUpdateUser = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminUpdateUser>>,
      TError,
      { id: number; data: UserRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminUpdateUser>>,
  TError,
  { id: number; data: UserRequest },
  TContext
> => {
  const mutationOptions = getAdminUpdateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
