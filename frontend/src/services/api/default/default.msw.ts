/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Football Pool API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  GameListResponse,
  GameResponse,
  PickListResponse,
  PickResponse,
  ResultResponse,
  SurvivorPickResponse,
  UserListResponse,
  UserResponse,
} from "../../model";

export const getLoginUserResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getRegisterUserResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getGetProfileResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getUpdateProfileResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getGetGamesResponseMock = (
  overrideResponse: Partial<GameListResponse> = {},
): GameListResponse => ({
  games: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    week: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    season: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    spread: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getCreateGameResponseMock = (): GameResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    week: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    season: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    spread: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getGetPicksResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getSubmitPicksResponseMock = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getAdminSubmitPicksResponseMock = (): PickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getGetWeeklyResultsResponseMock = (): ResultResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    favorite_score: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    underdog_score: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    outcome: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getGetSeasonResultsResponseMock = (): ResultResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    favorite_score: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    underdog_score: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    outcome: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getSubmitResultResponseMock = (
  overrideResponse: Partial<ResultResponse> = {},
): ResultResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  game_id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  game: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      week: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      season: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
      underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
      spread: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    undefined,
  ]),
  favorite_score: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  underdog_score: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  outcome: faker.string.alpha({ length: { min: 10, max: 20 } }),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getGetSurvivorPicksResponseMock = (): SurvivorPickResponse[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    week: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getSubmitSurvivorPickResponseMock = (
  overrideResponse: Partial<SurvivorPickResponse> = {},
): SurvivorPickResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  user_id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  user: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      email: faker.string.alpha({ length: { min: 10, max: 20 } }),
      role: faker.string.alpha({ length: { min: 10, max: 20 } }),
      player: faker.helpers.arrayElement([
        {
          id: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          user_id: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          address: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        undefined,
      ]),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    undefined,
  ]),
  week: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  team: faker.string.alpha({ length: { min: 10, max: 20 } }),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getDebugGetUsersResponseMock = (
  overrideResponse: Partial<UserListResponse> = {},
): UserListResponse => ({
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    role: faker.string.alpha({ length: { min: 10, max: 20 } }),
    player: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        user_id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        address: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      undefined,
    ]),
    pick_count: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_wins: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminListGamesResponseMock = (
  overrideResponse: Partial<GameListResponse> = {},
): GameListResponse => ({
  games: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    week: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    season: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
    spread: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getUpdateGameResponseMock = (
  overrideResponse: Partial<GameResponse> = {},
): GameResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  week: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  season: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
  underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
  spread: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getAdminListPicksResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByWeekResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminGetPicksByUserResponseMock = (
  overrideResponse: Partial<PickListResponse> = {},
): PickListResponse => ({
  picks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    user: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        email: faker.string.alpha({ length: { min: 10, max: 20 } }),
        role: faker.string.alpha({ length: { min: 10, max: 20 } }),
        player: faker.helpers.arrayElement([
          {
            id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            user_id: faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          undefined,
        ]),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    game_id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    game: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        week: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        season: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        favorite_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        underdog_team: faker.string.alpha({ length: { min: 10, max: 20 } }),
        spread: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      undefined,
    ]),
    picked: faker.string.alpha({ length: { min: 10, max: 20 } }),
    rank: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    quick_pick: faker.datatype.boolean(),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminListUsersResponseMock = (
  overrideResponse: Partial<UserListResponse> = {},
): UserListResponse => ({
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    role: faker.string.alpha({ length: { min: 10, max: 20 } }),
    player: faker.helpers.arrayElement([
      {
        id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        user_id: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        address: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
      undefined,
    ]),
    pick_count: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_wins: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    limit: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getAdminGetUserResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getAdminUpdateUserResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  player: faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      user_id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    undefined,
  ]),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getLoginUserMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.post("*/api/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLoginUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLogoutUserMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.post("*/api/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getRegisterUserMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.post("*/api/register", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getRegisterUserResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getHealthCheckMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.get("*/api/health", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetProfileMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.get("*/api/users/me", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateProfileMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.put("*/api/users/me/update", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetGamesMockHandler = (
  overrideResponse?:
    | GameListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GameListResponse> | GameListResponse),
) => {
  return http.get("*/api/games", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetGamesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateGameMockHandler = (
  overrideResponse?:
    | GameResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GameResponse[]> | GameResponse[]),
) => {
  return http.post("*/api/games/create", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateGameResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPicksMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/picks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPicksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSubmitPicksMockHandler = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
) => {
  return http.post("*/api/picks/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSubmitPicksResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminSubmitPicksMockHandler = (
  overrideResponse?:
    | PickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PickResponse[]> | PickResponse[]),
) => {
  return http.post("*/api/admin/picks/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminSubmitPicksResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetWeeklyResultsMockHandler = (
  overrideResponse?:
    | ResultResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ResultResponse[]> | ResultResponse[]),
) => {
  return http.get("*/api/results/week", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetWeeklyResultsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetSeasonResultsMockHandler = (
  overrideResponse?:
    | ResultResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ResultResponse[]> | ResultResponse[]),
) => {
  return http.get("*/api/results/season", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetSeasonResultsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSubmitResultMockHandler = (
  overrideResponse?:
    | ResultResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ResultResponse> | ResultResponse),
) => {
  return http.post("*/api/results", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSubmitResultResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetSurvivorPicksMockHandler = (
  overrideResponse?:
    | SurvivorPickResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SurvivorPickResponse[]> | SurvivorPickResponse[]),
) => {
  return http.get("*/api/survivor/picks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetSurvivorPicksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSubmitSurvivorPickMockHandler = (
  overrideResponse?:
    | SurvivorPickResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SurvivorPickResponse> | SurvivorPickResponse),
) => {
  return http.post("*/api/survivor/picks/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSubmitSurvivorPickResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDebugGetUsersMockHandler = (
  overrideResponse?:
    | UserListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserListResponse> | UserListResponse),
) => {
  return http.get("*/api/debug/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDebugGetUsersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteUserMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/api/admin/users/delete", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAdminListGamesMockHandler = (
  overrideResponse?:
    | GameListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GameListResponse> | GameListResponse),
) => {
  return http.get("*/api/admin/games", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminListGamesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateGameMockHandler = (
  overrideResponse?:
    | GameResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<GameResponse> | GameResponse),
) => {
  return http.put("*/api/admin/games/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateGameResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteGameMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/api/admin/games/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAdminListPicksMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/admin/picks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminListPicksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminGetPicksByWeekMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/admin/picks/week/:week", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminGetPicksByWeekResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminGetPicksByUserMockHandler = (
  overrideResponse?:
    | PickListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PickListResponse> | PickListResponse),
) => {
  return http.get("*/api/admin/picks/user/:userId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminGetPicksByUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminDeletePickMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/api/admin/picks/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAdminListUsersMockHandler = (
  overrideResponse?:
    | UserListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserListResponse> | UserListResponse),
) => {
  return http.get("*/api/admin/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminListUsersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminGetUserMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.get("*/api/admin/users/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminGetUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAdminUpdateUserMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.put("*/api/admin/users/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAdminUpdateUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getDefaultMock = () => [
  getLoginUserMockHandler(),
  getLogoutUserMockHandler(),
  getRegisterUserMockHandler(),
  getHealthCheckMockHandler(),
  getGetProfileMockHandler(),
  getUpdateProfileMockHandler(),
  getGetGamesMockHandler(),
  getCreateGameMockHandler(),
  getGetPicksMockHandler(),
  getSubmitPicksMockHandler(),
  getAdminSubmitPicksMockHandler(),
  getGetWeeklyResultsMockHandler(),
  getGetSeasonResultsMockHandler(),
  getSubmitResultMockHandler(),
  getGetSurvivorPicksMockHandler(),
  getSubmitSurvivorPickMockHandler(),
  getDebugGetUsersMockHandler(),
  getDeleteUserMockHandler(),
  getAdminListGamesMockHandler(),
  getUpdateGameMockHandler(),
  getDeleteGameMockHandler(),
  getAdminListPicksMockHandler(),
  getAdminGetPicksByWeekMockHandler(),
  getAdminGetPicksByUserMockHandler(),
  getAdminDeletePickMockHandler(),
  getAdminListUsersMockHandler(),
  getAdminGetUserMockHandler(),
  getAdminUpdateUserMockHandler(),
];
